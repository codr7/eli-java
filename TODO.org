fact PT1.041657052S
fib PT1.014438102S

* fix method arg splat

(check 3
  (^foo [x y]
    (if (= x 1)
      (foo [2 3]*))
    y)

  (foo 1 2))

* implement list splat

[[1 2 3]*]

* add next to loop bodies
** goto body start

* implement composition
** foo & bar

ACODR

  1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5
  1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5
+ 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9 6 7 8 9 10
- z n n n n o z n n n 2 o z n n 3 2 o z n 4 3 2 o z

n 1 2 3 4, 2 3 4, 3 4, 4
z 0,    1,     2,   3, 4
o  ,    0,     1,   2, 3

(let [max-value (pow base (- value-bits 1))])


(for [k (range 0 op-count 1)]
  (for [i (range 1 max-op-value 1)]
    (for [j (range 1 max-op-value 1)]
       (let [op (ops k)
            v  (op i j)]
        (if (< v 2)
          (break))

        (if (= (values v) _)
          (say v " = " i " " op " " j)
          (values v (+ k 1 (bit/>> i op-bits) (bit/>> j (+ op-bits op-value-bits)))))))))

(say values)

(^factorize [i]
    (for [k (range 0 op-count 1)]
      (let [op (ops k)
            v  (op i j)]

    (for [xi (range 1 max-value 1)]
      (let [xv (pow base xi)]
        (for [yi (range 1 max-value 1)]
          (if (> yi i)
            (break))

          (let [yv (pow base yi)
                v  (op xx yv)]
            (if (= v i)
              (say "FOUND " i " " xi " " op " " yi)
              (values i )
              (break))))))))

(for [i (range 2 max-value 1)]
  (if (= (values i) _)
    (factorize i)))

    (for [op ops]
      (for [xi (range 1 max-value 1)]
        (let [xv (pow base xi)]
          (for [yi (range 1 max-value 1)]
            (if (> y i)
              (break))

            (let [v (op x y)]
              (if (= v i)
                (say "FOUND " i " " x " " op " " y)
                (values i )
                (break)))))))))

FEATURES

* add head/tail methods + tests + readme

* add Method support for optional args
** look for ? in arg assignment

* add slice/splice support to list/string
** handle pair index with/without value

* add update support to list/string
** handle second arg

* add load macro
** emit setpath

* return 1/x for one arg div
** add one arg div to num trait
*** add support in / method

* add parse-timestamp
** add Timestamp type?

CORE

* add range method
** add RangeTrait
** create range
** optional max

* add range syntax
** 0..10:2

* add support for TypeSets
** Int | Nil
** add Int? shortcut for Maybe
** switch string/find result type to intType.maybe

STOJ

* add data to JTable
** use filename as name
** set interval to 1 day (time)

* add gui/chart module
** https://www.jfree.org/jfreechart/

** top panel for selection
*** id, start/end date and knobs for percentages/change
*** find first log for id > start
*** find all other logs matching knobs != id
*** match back in time if as far as possible
*** calculate open/high/low as percentage of price
**** log seq, series name, delta time, percentages & change
*** draw a projection for each found id & one for actual data if any

* add padding to column/row-layout
* figure out why csv parser isn't included in jar build

jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

** https://www.investing.com/crypto/bitcoin/historical-data