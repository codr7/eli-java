(var
  ops           [+ -]
  op-count      (len ops)
  op-bits       (bit/len op-count)
  value-bits    (- 8 op-bits)
  op-value-bits (/ value-bits 2)
  base          8
  max-value     (pow base value-bits)
  max-op-value  (pow base op-value-bits)
  values        (list/alloc max-value))

(values 0 0)
(values 1 1)

(let [v base]
  (while (< v max-value)
    (values v (bit/>> v op-bits))
    (set v (* v base))))

(for [k (range 0 op-count 1)]
  (for [i (range 1 max-op-value 1)]
    (for [j (range 1 max-op-value 1)]
       (let [op (ops k)
            v  (op i j)]
        (if (< v 2)
          (break))

        (if (= (values v) _)
          (say v " = " i " " op " " j)
          (values v (+ k 1 (bit/>> i op-bits) (bit/>> j (+ op-bits op-value-bits)))))))))

(say values)