(var
  ops           [+ -]
  op-count      (len ops)
  op-bits       (bit/len op-count)
  value-bits    (- 8 op-bits)
  base          8
  encode-map    {})

(encode-map 0 0)

(let [dv 1 ev 1]
  (for [_ (range 0 value-bits 1)]
    (encode-map dv ev)
    (set dv (* dv base) ev (* ev 2))))

(say encode-map)

(for [c (iter/combinations encode-map)]
  (let [dvs:evs (iter/unzip c)]
    (say dvs evs)))